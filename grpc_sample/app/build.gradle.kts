/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.google.protobuf.gradle.*;

buildscript {
    dependencies {
        classpath("com.google.protobuf:protobuf-gradle-plugin:0.9.1")
    }
}

apply(plugin = "com.google.protobuf")

plugins {
    kotlin("jvm") version "1.6.21"
    id("com.google.protobuf") version "0.9.1"
    id("java")
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(11))
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().all {
    kotlinOptions {
        freeCompilerArgs = listOf("-opt-in=kotlin.RequiresOptIn")
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
    google()
}

val grpcJavaVersion by extra { "1.50.2" }
val grpcKotlinVersion by extra { "1.3.0" }
val protobufVersion by extra { "3.21.9" }
val protocVersion = protobufVersion


dependencies {
    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.0.1-jre")

    implementation("io.grpc:grpc-netty:${grpcJavaVersion}")
//    implementation("io.grpc:grpc-protobuf:${grpcVersion}")
//    implementation("io.grpc:grpc-stub:${grpcVersion}")
//    implementation("com.google.protobuf:protobuf-kotlin:${protobufVersion}")
    implementation("com.google.protobuf:protobuf-java:${protobufVersion}")

    api(kotlin("stdlib-jdk8"))

    api("io.grpc:grpc-stub:${grpcJavaVersion}")
    api("io.grpc:grpc-kotlin-stub:${grpcKotlinVersion}")
    api("io.grpc:grpc-protobuf:${grpcJavaVersion}")
    api("com.google.protobuf:protobuf-java-util:${protobufVersion}")
    api("com.google.protobuf:protobuf-kotlin:${protobufVersion}")
    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")

    testImplementation(kotlin("test-junit"))
    testImplementation("io.grpc:grpc-testing:$grpcJavaVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
}


protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcJavaVersion}"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${grpcKotlinVersion}:jdk8@jar"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                id("grpc")
                id("grpckt")
            }
            it.builtins {
                id("kotlin")
            }
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceSets {
    main {
        proto {
            srcDirs("src/proto")
        }
    }
}

application {
    // Define the main class for the application.
    mainClass.set("grpc_sample.server.AppKt")
}

task("runServer", JavaExec::class) {
    group = "Execution"
    description = "Run the main class for Server"
    classpath = sourceSets["main"].runtimeClasspath
    mainClass.set("grpc_sample.server.AppKt")
}

task("runClient", JavaExec::class) {
    group = "Execution"
    description = "Run the main class for Server"
    classpath = sourceSets["main"].runtimeClasspath
    mainClass.set("grpc_sample.client.AppKt")
}


//task runServer(type: JavaExec) {
//    group = "Execution"
//    description = "Run the main class for Server"
//    classpath = sourceSets.main.runtimeClasspath
//    main = javaMainClass
//}